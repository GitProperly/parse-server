"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultMongoURI = exports.default = void 0;

var _parsers = require("./Options/parsers");

const {
  ParseServerOptions
} = require('./Options/Definitions');

const logsFolder = (() => {
  let folder = './logs/';

  if (typeof process !== 'undefined' && process.env.TESTING === '1') {
    folder = './test_logs/';
  }

  if (process.env.PARSE_SERVER_LOGS_FOLDER) {
    folder = (0, _parsers.nullParser)(process.env.PARSE_SERVER_LOGS_FOLDER);
  }

  return folder;
})();

const {
  verbose,
  level
} = (() => {
  const verbose = process.env.VERBOSE ? true : false;
  return {
    verbose,
    level: verbose ? 'verbose' : undefined
  };
})();

const DefinitionDefaults = Object.keys(ParseServerOptions).reduce((memo, key) => {
  const def = ParseServerOptions[key];

  if (def.hasOwnProperty('default')) {
    memo[key] = def.default;
  }

  return memo;
}, {});
const computedDefaults = {
  jsonLogs: process.env.JSON_LOGS || false,
  logsFolder,
  verbose,
  level,
  queryMiddleware: []
};

var _default = Object.assign({}, DefinitionDefaults, computedDefaults);

exports.default = _default;
const DefaultMongoURI = DefinitionDefaults.databaseURI;
exports.DefaultMongoURI = DefaultMongoURI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0cy5qcyJdLCJuYW1lcyI6WyJQYXJzZVNlcnZlck9wdGlvbnMiLCJyZXF1aXJlIiwibG9nc0ZvbGRlciIsImZvbGRlciIsInByb2Nlc3MiLCJlbnYiLCJURVNUSU5HIiwiUEFSU0VfU0VSVkVSX0xPR1NfRk9MREVSIiwidmVyYm9zZSIsImxldmVsIiwiVkVSQk9TRSIsInVuZGVmaW5lZCIsIkRlZmluaXRpb25EZWZhdWx0cyIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJtZW1vIiwia2V5IiwiZGVmIiwiaGFzT3duUHJvcGVydHkiLCJkZWZhdWx0IiwiY29tcHV0ZWREZWZhdWx0cyIsImpzb25Mb2dzIiwiSlNPTl9MT0dTIiwicXVlcnlNaWRkbGV3YXJlIiwiYXNzaWduIiwiRGVmYXVsdE1vbmdvVVJJIiwiZGF0YWJhc2VVUkkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBeUJDLE9BQU8sQ0FBQyx1QkFBRCxDQUF0Qzs7QUFDQSxNQUFNQyxVQUFVLEdBQUcsQ0FBQyxNQUFNO0FBQ3hCLE1BQUlDLE1BQU0sR0FBRyxTQUFiOztBQUNBLE1BQUksT0FBT0MsT0FBUCxLQUFtQixXQUFuQixJQUFrQ0EsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0IsR0FBOUQsRUFBbUU7QUFDakVILElBQUFBLE1BQU0sR0FBRyxjQUFUO0FBQ0Q7O0FBQ0QsTUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlFLHdCQUFoQixFQUEwQztBQUN4Q0osSUFBQUEsTUFBTSxHQUFHLHlCQUFXQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsd0JBQXZCLENBQVQ7QUFDRDs7QUFDRCxTQUFPSixNQUFQO0FBQ0QsQ0FUa0IsR0FBbkI7O0FBV0EsTUFBTTtBQUFFSyxFQUFBQSxPQUFGO0FBQVdDLEVBQUFBO0FBQVgsSUFBcUIsQ0FBQyxNQUFNO0FBQ2hDLFFBQU1ELE9BQU8sR0FBR0osT0FBTyxDQUFDQyxHQUFSLENBQVlLLE9BQVosR0FBc0IsSUFBdEIsR0FBNkIsS0FBN0M7QUFDQSxTQUFPO0FBQUVGLElBQUFBLE9BQUY7QUFBV0MsSUFBQUEsS0FBSyxFQUFFRCxPQUFPLEdBQUcsU0FBSCxHQUFlRztBQUF4QyxHQUFQO0FBQ0QsQ0FIMEIsR0FBM0I7O0FBS0EsTUFBTUMsa0JBQWtCLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZZCxrQkFBWixFQUFnQ2UsTUFBaEMsQ0FDekIsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDYixRQUFNQyxHQUFHLEdBQUdsQixrQkFBa0IsQ0FBQ2lCLEdBQUQsQ0FBOUI7O0FBQ0EsTUFBSUMsR0FBRyxDQUFDQyxjQUFKLENBQW1CLFNBQW5CLENBQUosRUFBbUM7QUFDakNILElBQUFBLElBQUksQ0FBQ0MsR0FBRCxDQUFKLEdBQVlDLEdBQUcsQ0FBQ0UsT0FBaEI7QUFDRDs7QUFDRCxTQUFPSixJQUFQO0FBQ0QsQ0FQd0IsRUFRekIsRUFSeUIsQ0FBM0I7QUFXQSxNQUFNSyxnQkFBZ0IsR0FBRztBQUN2QkMsRUFBQUEsUUFBUSxFQUFFbEIsT0FBTyxDQUFDQyxHQUFSLENBQVlrQixTQUFaLElBQXlCLEtBRFo7QUFFdkJyQixFQUFBQSxVQUZ1QjtBQUd2Qk0sRUFBQUEsT0FIdUI7QUFJdkJDLEVBQUFBLEtBSnVCO0FBS3ZCZSxFQUFBQSxlQUFlLEVBQUU7QUFMTSxDQUF6Qjs7ZUFRZVgsTUFBTSxDQUFDWSxNQUFQLENBQWMsRUFBZCxFQUFrQmIsa0JBQWxCLEVBQXNDUyxnQkFBdEMsQzs7O0FBQ1IsTUFBTUssZUFBZSxHQUFHZCxrQkFBa0IsQ0FBQ2UsV0FBM0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBudWxsUGFyc2VyIH0gZnJvbSAnLi9PcHRpb25zL3BhcnNlcnMnO1xuY29uc3QgeyBQYXJzZVNlcnZlck9wdGlvbnMgfSA9IHJlcXVpcmUoJy4vT3B0aW9ucy9EZWZpbml0aW9ucycpO1xuY29uc3QgbG9nc0ZvbGRlciA9ICgoKSA9PiB7XG4gIGxldCBmb2xkZXIgPSAnLi9sb2dzLyc7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuVEVTVElORyA9PT0gJzEnKSB7XG4gICAgZm9sZGVyID0gJy4vdGVzdF9sb2dzLyc7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52LlBBUlNFX1NFUlZFUl9MT0dTX0ZPTERFUikge1xuICAgIGZvbGRlciA9IG51bGxQYXJzZXIocHJvY2Vzcy5lbnYuUEFSU0VfU0VSVkVSX0xPR1NfRk9MREVSKTtcbiAgfVxuICByZXR1cm4gZm9sZGVyO1xufSkoKTtcblxuY29uc3QgeyB2ZXJib3NlLCBsZXZlbCB9ID0gKCgpID0+IHtcbiAgY29uc3QgdmVyYm9zZSA9IHByb2Nlc3MuZW52LlZFUkJPU0UgPyB0cnVlIDogZmFsc2U7XG4gIHJldHVybiB7IHZlcmJvc2UsIGxldmVsOiB2ZXJib3NlID8gJ3ZlcmJvc2UnIDogdW5kZWZpbmVkIH07XG59KSgpO1xuXG5jb25zdCBEZWZpbml0aW9uRGVmYXVsdHMgPSBPYmplY3Qua2V5cyhQYXJzZVNlcnZlck9wdGlvbnMpLnJlZHVjZShcbiAgKG1lbW8sIGtleSkgPT4ge1xuICAgIGNvbnN0IGRlZiA9IFBhcnNlU2VydmVyT3B0aW9uc1trZXldO1xuICAgIGlmIChkZWYuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSkge1xuICAgICAgbWVtb1trZXldID0gZGVmLmRlZmF1bHQ7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9LFxuICB7fVxuKTtcblxuY29uc3QgY29tcHV0ZWREZWZhdWx0cyA9IHtcbiAganNvbkxvZ3M6IHByb2Nlc3MuZW52LkpTT05fTE9HUyB8fCBmYWxzZSxcbiAgbG9nc0ZvbGRlcixcbiAgdmVyYm9zZSxcbiAgbGV2ZWwsXG4gIHF1ZXJ5TWlkZGxld2FyZTogW10sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBPYmplY3QuYXNzaWduKHt9LCBEZWZpbml0aW9uRGVmYXVsdHMsIGNvbXB1dGVkRGVmYXVsdHMpO1xuZXhwb3J0IGNvbnN0IERlZmF1bHRNb25nb1VSSSA9IERlZmluaXRpb25EZWZhdWx0cy5kYXRhYmFzZVVSSTsiXX0=